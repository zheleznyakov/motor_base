<?php


namespace Application\Tests\Functional;


use Application\Classes\DB;
use Application\Models\UsersModel;
use PHPUnit\Framework\TestCase;

class UserModelTest extends TestCase
{
    public static $db;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        DB::debug(true);
        self::$db = DB::getInstance();
        UsersModel::setDB(self::$db);
    }

    /*protected function setUpBeforeClass(): void
    {
        DB::debug(true);
        $this->db = DB::getInstance();
        UsersModel::setDB($this->db);

    }*/
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->assertSame(true,self::$db->execute('TRUNCATE TABLE users'),
            "не удалось очистить таблицу users");
    }

    public function testFindByEmail()
    {
        $data =
            [':email'=>'zhelezny.andrey@gmail.com',
                ':password'=>'$argon2i$v=19$m=1024,t=2,p=2$M0o3QW44T1cyVWJJOUx2MQ$t/Oc0yW3uvSzFSqCsZzYssONmgDpS/tOmR5mIcUWwh0',
                ':name'=>'root',
                ':invitation'=>'',
                ':group'=>1]
        ;
        $sql = 'INSERT INTO `users` (`email`,`password`,`name`,`invitation`,`group`) 
                            VALUES (:email,:password,:name,:invitation,:group)';
        $this->assertSame(true, self::$db->execute($sql,$data), "не удалось добавить пользователя");


        $model = UsersModel::findByEmail('zhelezny.andrey@gmail.com');
        $this->assertSame('root',$model->name,"имя найденного пользователя не соответсвует ожиданию");
    }

    public function testFindAllUsers()
    {
        $data =[
            [':email'=>'zhelezny.andrey@gmail.com',
                ':password'=>'$argon2i$v=19$m=1024,t=2,p=2$M0o3QW44T1cyVWJJOUx2MQ$t/Oc0yW3uvSzFSqCsZzYssONmgDpS/tOmR5mIcUWwh0',
                ':name'=>'root',
                ':invitation'=>'',
                ':group'=>1],
            [':email'=>'zhelezny.andrey@yandex.ru',
                ':password'=>'',
                ':name'=>'Андрей',
                ':invitation'=>'',
                ':group'=>0],
            [':email'=>'test@test.com',
                ':password'=>'',
                ':name'=>'ivan',
                ':invitation'=>'',
                ':group'=>0]
            ];
        foreach ($data as $user)
        {
            $sql = 'INSERT INTO `users` (`email`,`password`,`name`,`invitation`,`group`) 
                            VALUES (:email,:password,:name,:invitation,:group)';
            $this->assertSame(true, self::$db->execute($sql,$user), "не удалось добавить пользователя");
        }

        $models = UsersModel::findAllUsers();
        $this->assertSame(3,count((array)$models),"Количество добавленных пользователей не совпало с ожидаемым");

    }


}